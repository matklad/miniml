use std::str::FromStr;
use super::exprs::{Expr, ArithBinOp, ArithOp, CmpBinOp, CmpOp, Literal};
use super::types::Type;
use super::parser_util::*;

grammar["LALR(1)"];

pub Expr: Expr = {
    "if" <Expr> "then" <Expr> "else" <Expr> => if_expr(<>),
    "fun" <Ident> "(" <Ident> ":" <Type> ")" ":" <Type> "is" <Expr> => fun_expr(<>),
    Sum CmpOp Sum => cmp_op(<>),
    Sum,
};

CmpOp: CmpOp = {
    "<"  => CmpOp::Lt,
    "==" => CmpOp::Eq,
    ">"  => CmpOp::Gt,
};

Sum: Expr = {
    Sum SumOp Factor => arith_op(<>),
    Factor,
};

SumOp: ArithOp = {
   "+" => ArithOp::Add,
   "-" => ArithOp::Sub,
};

Factor: Expr = {
    Factor FactorOp App => arith_op(<>),
    App,
};

App: Expr = {
    App Term => application(<>),
    Term,
};

FactorOp: ArithOp = {
   "*" => ArithOp::Mul,
   "/" => ArithOp::Div,
};

Term: Expr = {
    Num   => Expr::Literal(Literal::Number(<>)),
    Bool  => Expr::Literal(Literal::Bool(<>)),
    Ident => Expr::Var(<>),
    "(" <Expr> ")",
};

Type: Type = {
    <fun:AtomType> "->" <arg:Type> => Type::Arrow(Box::new(fun), Box::new(arg)),
    AtomType,
};

AtomType: Type = {
    "int"  => Type::Int,
    "bool" => Type::Bool,
    "(" <Type> ")",
};

Num: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();

Bool: bool = {
    "true"  => true,
    "false" => false,
};

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_owned();
