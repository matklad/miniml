use std::str::FromStr;

use Ident;
use super::exprs::{Expr, ArithBinOp, ArithOp, CmpBinOp, CmpOp, Literal};
use super::types::Type;
use super::parser_util::*;

grammar["LALR(1)"];

pub Expr: Expr = {
    SumL CmpOp SumR => cmp_op(<>),
    SumR,
};

CmpOp: CmpOp = {
    "<"  => CmpOp::Lt,
    "==" => CmpOp::Eq,
    ">"  => CmpOp::Gt,
};

SumR: Expr = {
    SumL SumOp FactorR => arith_op(<>),
    FactorR,
};

SumL: Expr = {
    SumL SumOp FactorL => arith_op(<>),
    FactorL
};

SumOp: ArithOp = {
   "+" => ArithOp::Add,
   "-" => ArithOp::Sub,
};

FactorR: Expr = {
    FactorL FactorOp AppR => arith_op(<>),
    AppR,
};

FactorL: Expr = {
    FactorL FactorOp AppL => arith_op(<>),
    AppL,
};

FactorOp: ArithOp = {
   "*" => ArithOp::Mul,
   "/" => ArithOp::Div,
};

AppR: Expr = {
    AppL TermR => application(<>),
    TermR,
};

AppL : Expr = {
    AppL TermL => application(<>),
    TermL,
};

TermR: Expr = {
    If,
    Fun,
    TermL,
};

TermL: Expr = {
    Parens,
    Num   => Literal::Number(<>).into(),
    Bool  => Literal::Bool(<>).into(),
    Ident => Expr::Var(<>),
};

If:  Expr = "if" <Expr> "then" <Expr> "else" <Expr> => if_expr(<>);

Fun: Expr = "fun" <Ident> "(" <Ident> ":" <Type> ")" ":" <Type> "is" <Expr> => fun_expr(<>);

Parens: Expr = "(" <Expr> ")";

Type: Type = {
    <fun:AtomType> "->" <arg:Type> => Type::Arrow(Box::new(fun), Box::new(arg)),
    AtomType,
};

AtomType: Type = {
    "int"  => Type::Int,
    "bool" => Type::Bool,
    "(" <Type> ")",
};

Num: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();

Bool: bool = {
    "true"  => true,
    "false" => false,
};

Ident: Ident = r"[_a-zA-Z][_a-zA-Z0-9]*" => Ident::from_str(<>);
